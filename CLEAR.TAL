;******************************* FLBOOT.TAL ********************************
;  (C) Copyright 1987-1993  Computer System Architects, Provo UT.           *
;  This  program is the property of Computer System Architects (CSA)        *
;  and is provided only as an example of a transputer/PC program for        *
;  use  with CSA's Transputer Education Kit and other transputer products.  *
;  You may freely distribute copies or modifiy the program as a whole or in *
;  part, provided you insert in each copy appropriate copyright notices and *
;  disclaimer of warranty and send to CSA a copy of any modifications which *
;  you plan to distribute.						    *
;  This program is provided as is without warranty of any kind. CSA is not  *
;  responsible for any damages arising out of the use of this program.      *
;***************************************************************************/
;****************************************************************************
; This program  boots a transputer, does necessary initialization and
; boots other transputers connected to it with an exact copy of itself. It
; keeps track of links through which other trnasputers are booted.
; After booting process, it loads the loader and sends copies of the loader
; to other transputers connected. Then it starts executing the loader.
;***************************************************************************

	.t800
;  val definition;

	.val    RESERVE,16
	.val    INITIME,0
	.val    DELAY,16*100
	.val    LOCTOP,16

    ;this struct shared with flboot & ident
	.val    MININT,1
	.val    MEMSTART,2
	.val    BOOTIN,3
	.val    CODELEN,12              ;high order bytes must stay zeroed
	.val    LOOPA,13
	.val    LOOPB,14
	.val    WSP,15

	.val    OBUFWS,7
	.val    OSTATIC,1
	.val    OLINK,2
	.val    OLOCAL,3
	
	.val    STATUS,0x80000F00

	.pub    START
;initialization

	.align
START:  ajw     RESERVE                 ;reserve work space
	call    0                       ;save registers into workspace. Fills: MININT, MEMSTART & BOOTIN (from Creg)
	ldc     @START - @S1
	ldpi
S1: stl     MEMSTART                ;save memory start
	ldlp    4-RESERVE               ;calc code length
	ldl     MEMSTART
	diff
	stl     CODELEN
	mint
	stl     MININT                  ;save MIN INTEGER
	ldl     MININT                  ;init process front pointers
	stlf
	ldl     MININT
	sthf
I1: ldc     0                       ;init links and event
	stl     LOOPA                   ;LOOPA=0 (lend control block 0:11)
	ldc     11
	stl     LOOPB                   
I2: ldl     MININT                  ;init link control words to minint
	ldl     LOOPA                   
	ldl     MININT                  
	wsub                            
	stnl    0                       ;minint[LOOPA+0]=minint
	ldlp    LOOPA
	ldc     I3-I2
	lend                            ;inc & test loop control struct
I3: ldc     INITIME                 ;start timer at INITIME(0)
	sttimer

	;{{{ STATUS=0
	ldc     0
	ldc     STATUS
	stnl    0
	;}}}

; bootstrap neighbors
; send bootstrap out on all links, except link booted from. Use high-prio processes to do all 3 links in PAR
; fire & forget, i.e don't care if bootstrap accepted

	ldlp    LOCTOP-OLOCAL           ;init new work space ptr
	stl     WSP
	ldc     0                       ;loop i:= 0 for 4 each link
	stl     LOOPA                   ;LOOPA = lend control struct 0:4
	ldc     4
	stl     LOOPB
B1: ldl     LOOPA                   ;if LINKIN[i] <> BOOTIN
	ldl     MININT
	ldnlp   4
	wsub
	ldl     BOOTIN
	diff
	cj      @B3
	ldl     WSP                     ;alloc OUTBUF work space
	ldnlp   OBUFWS
	stl     WSP
	ldl     LOOPA                   ;save LINKOUT[i]
	ldl     MININT
	wsub
	ldl     WSP
	stnl    OLINK

	ldlp    0                       ;save static link
	ldl     WSP
	stnl    OSTATIC
	ldc     OUTBUF-B2               ;save iptr to OUTBUF
	ldpi
B2: ldl     WSP
	stnl    -1
	ldl     WSP                     ;load new work space ptr
	runp                            ;run output buffer at high pri
B3: ldlp    LOOPA
	ldc     B4-B1
	lend                            ;end loop
B4: 

    ;quick double flash
   seterr                          ;error LED ON
   ldtimer
   adc    2000
   tin                             ;end delay
   testerr                         ;error LED OFF
   ldtimer
   adc    2000
   tin                             ;end delay
   seterr                          ;error LED ON
   ldtimer
   adc    2000
   tin                             ;end delay
   testerr                         ;error LED OFF
   
    stopp

    
;       output buffer
OUTBUF: 
    ;send bootstrap
    ldl     OLINK                   ;load output link
    ldl     OSTATIC                 ;load code length
    ldnl    CODELEN
    outbyte                         ;output code length
    ldl     OSTATIC                 ;load code start
    ldnl    MEMSTART
    ldl     OLINK                   ;load output link
    ldl     OSTATIC                 ;load code length
    ldnl    CODELEN
    out                             ;output code
    stopp

        .align
END:    .end
